[{"path":"https://nlmixr2.github.io/lotri/articles/lotri-motivation.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Lotri Motivation","text":"made allow people (like ) specify lower triangular matrices similar domain specific language implemented nlmixr. Originally included RxODE, thought may general applicability, separated new package. , specifying matrices way easier specifying using R’s default matrix. instance fully specify simple 2x2 matrix, R specify: lotri, simply specify: find legible easier specify, especially complex matrix. instance complex matrix: fully specify base R need use: course excellent Matrix package bit easier: Regardless, think lotri bit easier use.","code":"mat <- matrix(c(1, 0.5, 0.5, 1),nrow=2,ncol=2,dimnames=list(c(\"a\", \"b\"), c(\"a\", \"b\"))) library(lotri) library(microbenchmark) library(ggplot2)  mat <- lotri(a+b ~ c(1,                      0.5, 1)) mat <- lotri({     a+b ~ c(1,             0.5, 1)     c ~ 1     d +e ~ c(1,              0.5, 1) }) mat <- matrix(c(1, 0.5, 0, 0, 0,                 0.5, 1, 0, 0, 0,                 0, 0, 1, 0, 0,                 0, 0, 0, 1, 0.5,                 0, 0, 0, 0.5, 1),               nrow=5, ncol=5,               dimnames= list(c(\"a\", \"b\", \"c\", \"d\", \"e\"), c(\"a\", \"b\", \"c\", \"d\", \"e\"))) library(Matrix) mat <- matrix(c(1, 0.5, 0.5, 1),nrow=2,ncol=2,dimnames=list(c(\"a\", \"b\"), c(\"a\", \"b\"))) mat <- bdiag(list(mat, matrix(1), mat)) ## Convert back to standard matrix mat <- as.matrix(mat) ## dimnames(mat) <- list(c(\"a\", \"b\", \"c\", \"d\", \"e\"), c(\"a\", \"b\", \"c\", \"d\", \"e\"))"},{"path":"https://nlmixr2.github.io/lotri/articles/lotri-motivation.html","id":"creating-lists-of-matrices-with-attached-properties","dir":"Articles","previous_headings":"","what":"Creating lists of matrices with attached properties","title":"Lotri Motivation","text":"lotri also allows lists matrices created conditioning id | syntax. example: gives list matrix(es) conditioned variable |. also can add properties list can accessible list matrices returned, shown example. , simply enclose properties conditional variable. et1 ~ id(lower=3).","code":"mat <- lotri({     a+b ~ c(1,             0.5, 1) | id     c ~ 1 | occ     d +e ~ c(1,              0.5, 1) | id(lower=3, upper=2, omegaIsChol=FALSE) })  print(mat) #> $id #>     d   e #> d 1.0 0.5 #> e 0.5 1.0 #>  #> $occ #>   c #> c 1 #>  #> Properties: lower, upper, omegaIsChol  print(mat$lower) #> $id #> d e  #> 3 3  #>  #> $occ #>    c  #> -Inf print(mat$upper) #> $id #> d e  #> 2 2  #>  #> $occ #>   c  #> Inf print(mat$omegaIsChol) #> $id #> [1] FALSE"},{"path":"https://nlmixr2.github.io/lotri/articles/lotri-motivation.html","id":"combining-symmetric-named-matrices","dir":"Articles","previous_headings":"Creating lists of matrices with attached properties","what":"Combining symmetric named matrices","title":"Lotri Motivation","text":"Now even faster way similar banded matrix concatenation lotriMat","code":"testList <- list(lotri({et2 + et3 + et4 ~ c(40,                             0.1, 20,                             0.1, 0.1, 30)}),                      lotri(et5 ~ 6),                      lotri(et1+et6 ~c(0.1, 0.01, 1)),                      matrix(c(1L, 0L, 0L, 1L), 2, 2,                             dimnames=list(c(\"et7\", \"et8\"),                                           c(\"et7\", \"et8\"))))  matf <- function(.mats){   .omega <- as.matrix(Matrix::bdiag(.mats))   .d <- unlist(lapply(seq_along(.mats),                       function(x) {                         dimnames(.mats[[x]])[2]                       }))   dimnames(.omega) <- list(.d, .d)   return(.omega) }  print(matf(testList)) #>      et2  et3  et4 et5  et1  et6 et7 et8 #> et2 40.0  0.1  0.1   0 0.00 0.00   0   0 #> et3  0.1 20.0  0.1   0 0.00 0.00   0   0 #> et4  0.1  0.1 30.0   0 0.00 0.00   0   0 #> et5  0.0  0.0  0.0   6 0.00 0.00   0   0 #> et1  0.0  0.0  0.0   0 0.10 0.01   0   0 #> et6  0.0  0.0  0.0   0 0.01 1.00   0   0 #> et7  0.0  0.0  0.0   0 0.00 0.00   1   0 #> et8  0.0  0.0  0.0   0 0.00 0.00   0   1  print(lotriMat(testList)) #>      et2  et3  et4 et5  et1  et6 et7 et8 #> et2 40.0  0.1  0.1   0 0.00 0.00   0   0 #> et3  0.1 20.0  0.1   0 0.00 0.00   0   0 #> et4  0.1  0.1 30.0   0 0.00 0.00   0   0 #> et5  0.0  0.0  0.0   6 0.00 0.00   0   0 #> et1  0.0  0.0  0.0   0 0.10 0.01   0   0 #> et6  0.0  0.0  0.0   0 0.01 1.00   0   0 #> et7  0.0  0.0  0.0   0 0.00 0.00   1   0 #> et8  0.0  0.0  0.0   0 0.00 0.00   0   1   mb <- microbenchmark(matf(testList),lotriMat(testList))  print(mb) #> Unit: microseconds #>                expr      min       lq       mean   median        uq      max #>      matf(testList) 1288.662 1330.651 1576.11943 1370.314 1804.6085 6458.289 #>  lotriMat(testList)    3.116    3.677    6.28618    6.938    7.7795   16.411 #>  neval #>    100 #>    100 autoplot(mb)"},{"path":"https://nlmixr2.github.io/lotri/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew L. Fidler. Author, maintainer. Bill Denney. Contributor.","code":""},{"path":"https://nlmixr2.github.io/lotri/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fidler M (2024). lotri: Simple Way Specify Symmetric, Block Diagonal Matrices. R package version 1.0.0, https://github.com/nlmixr2/lotri, https://nlmixr2.github.io/lotri/.","code":"@Manual{,   title = {lotri: A Simple Way to Specify Symmetric, Block Diagonal Matrices},   author = {Matthew L. Fidler},   year = {2024},   note = {R package version 1.0.0, https://github.com/nlmixr2/lotri},   url = {https://nlmixr2.github.io/lotri/}, }"},{"path":"https://nlmixr2.github.io/lotri/index.html","id":"lotri-","dir":"","previous_headings":"","what":"A Simple Way to Specify Symmetric, Block Diagonal Matrices","title":"A Simple Way to Specify Symmetric, Block Diagonal Matrices","text":"goal lotri easily specify block-diagonal matrices (lo)wer (tri)angular matrices. won (badly spelled) lotri (lottery). made allow people (like ) specify lower triangular matrices similar domain specific language implemented nlmixr2. Originally included RxODE, thought may general applicability, separated new package.","code":""},{"path":"https://nlmixr2.github.io/lotri/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Simple Way to Specify Symmetric, Block Diagonal Matrices","text":"can install released version lotri CRAN : development version GitHub :","code":"install.packages(\"lotri\") # install.packages(\"devtools\") devtools::install_github(\"nlmixr2/lotri\")"},{"path":"https://nlmixr2.github.io/lotri/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A Simple Way to Specify Symmetric, Block Diagonal Matrices","text":"basic example easier way specify matrices R. instance fully specify simple 2x2 matrix, R specify: lotri, simply specify: find legible easier specify, especially complex matrix. instance complex matrix: fully specify base R need use: course excellent Matrix package bit easier: Regardless, think lotri bit easier use.","code":"mat <- matrix(c(1, 0.5, 0.5, 1),nrow=2,ncol=2,dimnames=list(c(\"a\", \"b\"), c(\"a\", \"b\"))) library(lotri) library(microbenchmark) library(ggplot2)   mat <- lotri(a+b ~ c(1,                      0.5, 1)) print(mat) #>     a   b #> a 1.0 0.5 #> b 0.5 1.0 mat <- lotri({     a+b ~ c(1,             0.5, 1)     c ~ 1     d +e ~ c(1,              0.5, 1) }) print(mat) #>     a   b c   d   e #> a 1.0 0.5 0 0.0 0.0 #> b 0.5 1.0 0 0.0 0.0 #> c 0.0 0.0 1 0.0 0.0 #> d 0.0 0.0 0 1.0 0.5 #> e 0.0 0.0 0 0.5 1.0 mat <- matrix(c(1, 0.5, 0, 0, 0,                 0.5, 1, 0, 0, 0,                 0, 0, 1, 0, 0,                 0, 0, 0, 1, 0.5,                 0, 0, 0, 0.5, 1),               nrow=5, ncol=5,               dimnames= list(c(\"a\", \"b\", \"c\", \"d\", \"e\"),                              c(\"a\", \"b\", \"c\", \"d\", \"e\"))) print(mat) #>     a   b c   d   e #> a 1.0 0.5 0 0.0 0.0 #> b 0.5 1.0 0 0.0 0.0 #> c 0.0 0.0 1 0.0 0.0 #> d 0.0 0.0 0 1.0 0.5 #> e 0.0 0.0 0 0.5 1.0 library(Matrix) mat <- matrix(c(1, 0.5, 0.5, 1),               nrow=2,               ncol=2,               dimnames=list(c(\"a\", \"b\"), c(\"a\", \"b\")))  mat <- bdiag(list(mat, matrix(1), mat))  ## Convert back to standard matrix mat <- as.matrix(mat) ## dimnames(mat) <- list(c(\"a\", \"b\", \"c\", \"d\", \"e\"),                       c(\"a\", \"b\", \"c\", \"d\", \"e\")) print(mat) #>     a   b c   d   e #> a 1.0 0.5 0 0.0 0.0 #> b 0.5 1.0 0 0.0 0.0 #> c 0.0 0.0 1 0.0 0.0 #> d 0.0 0.0 0 1.0 0.5 #> e 0.0 0.0 0 0.5 1.0"},{"path":"https://nlmixr2.github.io/lotri/index.html","id":"creating-lists-of-matrices-with-attached-properties","dir":"","previous_headings":"","what":"Creating lists of matrices with attached properties","title":"A Simple Way to Specify Symmetric, Block Diagonal Matrices","text":"lotri also allows lists matrices created conditioning id | syntax. example: gives list matrix(es) conditioned variable |. also can add properties list can accessible list matrices returned, shown example. , simply enclose properties conditional variable. et1 ~ id(lower=3).","code":"mat <- lotri({     a+b ~ c(1,             0.5, 1) | id     c ~ 1 | occ     d + e ~ c(1,               0.5, 1) | id(lower=3, upper=2, omegaIsChol=FALSE) })  print(mat) #> $id #>     d   e #> d 1.0 0.5 #> e 0.5 1.0 #>  #> $occ #>   c #> c 1 #>  #> Properties: lower, upper, omegaIsChol  print(mat$lower) #> $id #> d e  #> 3 3  #>  #> $occ #>    c  #> -Inf print(mat$upper) #> $id #> d e  #> 2 2  #>  #> $occ #>   c  #> Inf print(mat$omegaIsChol) #> $id #> [1] FALSE"},{"path":"https://nlmixr2.github.io/lotri/index.html","id":"combining-symmetric-named-matrices","dir":"","previous_headings":"","what":"Combining symmetric (named) matrices","title":"A Simple Way to Specify Symmetric, Block Diagonal Matrices","text":"Now even faster way similar banded matrix concatenation lotriMat  may also combine named unnamed matrices, resulting matrix unnamed, still faster Matrix:","code":"testList <- list(lotri({et2 + et3 + et4 ~ c(40,                             0.1, 20,                             0.1, 0.1, 30)}),                      lotri(et5 ~ 6),                      lotri(et1+et6 ~c(0.1, 0.01, 1)),                      matrix(c(1L, 0L, 0L, 1L), 2, 2,                             dimnames=list(c(\"et7\", \"et8\"),                                           c(\"et7\", \"et8\"))))  matf <- function(.mats){   .omega <- as.matrix(Matrix::bdiag(.mats))   .d <- unlist(lapply(seq_along(.mats),                       function(x) {                         dimnames(.mats[[x]])[2]                       }))   dimnames(.omega) <- list(.d, .d)   return(.omega) }  print(matf(testList)) #>      et2  et3  et4 et5  et1  et6 et7 et8 #> et2 40.0  0.1  0.1   0 0.00 0.00   0   0 #> et3  0.1 20.0  0.1   0 0.00 0.00   0   0 #> et4  0.1  0.1 30.0   0 0.00 0.00   0   0 #> et5  0.0  0.0  0.0   6 0.00 0.00   0   0 #> et1  0.0  0.0  0.0   0 0.10 0.01   0   0 #> et6  0.0  0.0  0.0   0 0.01 1.00   0   0 #> et7  0.0  0.0  0.0   0 0.00 0.00   1   0 #> et8  0.0  0.0  0.0   0 0.00 0.00   0   1  print(lotriMat(testList)) #>      et2  et3  et4 et5  et1  et6 et7 et8 #> et2 40.0  0.1  0.1   0 0.00 0.00   0   0 #> et3  0.1 20.0  0.1   0 0.00 0.00   0   0 #> et4  0.1  0.1 30.0   0 0.00 0.00   0   0 #> et5  0.0  0.0  0.0   6 0.00 0.00   0   0 #> et1  0.0  0.0  0.0   0 0.10 0.01   0   0 #> et6  0.0  0.0  0.0   0 0.01 1.00   0   0 #> et7  0.0  0.0  0.0   0 0.00 0.00   1   0 #> et8  0.0  0.0  0.0   0 0.00 0.00   0   1  mb <- microbenchmark(matf(testList),lotriMat(testList))  print(mb) #> Unit: microseconds #>                expr     min       lq      mean   median       uq      max neval #>      matf(testList) 497.401 504.1625 580.13382 507.6385 542.7125 4434.403   100 #>  lotriMat(testList)   2.574   2.9750   4.54131   4.1585   4.6635   40.652   100  autoplot(mb) #> Coordinate system already present. Adding new coordinate system, which will replace the existing one. testList <- list(lotri({et2 + et3 + et4 ~ c(40,                             0.1, 20,                             0.1, 0.1, 30)}),                      lotri(et5 ~ 6),                      lotri(et1+et6 ~c(0.1, 0.01, 1)),                      matrix(c(1L, 0L, 0L, 1L), 2, 2))  matf <- function(.mats){   .omega <- as.matrix(Matrix::bdiag(.mats))   return(.omega) }  print(matf(testList)) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,] 40.0  0.1  0.1    0 0.00 0.00    0    0 #> [2,]  0.1 20.0  0.1    0 0.00 0.00    0    0 #> [3,]  0.1  0.1 30.0    0 0.00 0.00    0    0 #> [4,]  0.0  0.0  0.0    6 0.00 0.00    0    0 #> [5,]  0.0  0.0  0.0    0 0.10 0.01    0    0 #> [6,]  0.0  0.0  0.0    0 0.01 1.00    0    0 #> [7,]  0.0  0.0  0.0    0 0.00 0.00    1    0 #> [8,]  0.0  0.0  0.0    0 0.00 0.00    0    1  print(lotriMat(testList)) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,] 40.0  0.1  0.1    0 0.00 0.00    0    0 #> [2,]  0.1 20.0  0.1    0 0.00 0.00    0    0 #> [3,]  0.1  0.1 30.0    0 0.00 0.00    0    0 #> [4,]  0.0  0.0  0.0    6 0.00 0.00    0    0 #> [5,]  0.0  0.0  0.0    0 0.10 0.01    0    0 #> [6,]  0.0  0.0  0.0    0 0.01 1.00    0    0 #> [7,]  0.0  0.0  0.0    0 0.00 0.00    1    0 #> [8,]  0.0  0.0  0.0    0 0.00 0.00    0    1  mb <- microbenchmark(matf(testList),lotriMat(testList))  print(mb) #> Unit: microseconds #>                expr     min       lq      mean   median       uq      max neval #>      matf(testList) 490.549 496.1515 539.12199 500.1220 519.4200 2044.815   100 #>  lotriMat(testList)   2.416   2.7915   4.16718   3.3725   4.5615   22.020   100  autoplot(mb) #> Coordinate system already present. Adding new coordinate system, which will replace the existing one."},{"path":"https://nlmixr2.github.io/lotri/index.html","id":"new-features","dir":"","previous_headings":"","what":"New features","title":"A Simple Way to Specify Symmetric, Block Diagonal Matrices","text":"new feature ability condition variables |. useful simulating nested random effects using upcoming RxODE2","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/as.lotri.html","id":null,"dir":"Reference","previous_headings":"","what":"As lower triangular matrix — as.lotri","title":"As lower triangular matrix — as.lotri","text":"lower triangular matrix","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/as.lotri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"As lower triangular matrix — as.lotri","text":"","code":"as.lotri(x, ..., default = \"\")  # S3 method for class 'matrix' as.lotri(x, ..., default = \"\")  # S3 method for class 'data.frame' as.lotri(x, ..., default = \"\")  # Default S3 method as.lotri(x, ..., default = \"\")"},{"path":"https://nlmixr2.github.io/lotri/reference/as.lotri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"As lower triangular matrix — as.lotri","text":"x Matrix data frame ... factors default default factor conditioning implemented.","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/as.lotri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"As lower triangular matrix — as.lotri","text":"Lower triangular matrix","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/as.lotri.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"As lower triangular matrix — as.lotri","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/dot-lotriPointers.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is used to get the pointers to the C objects that are used in the lotri package. — .lotriPointers","title":"This function is used to get the pointers to the C objects that are used in the lotri package. — .lotriPointers","text":"function used get pointers C objects used lotri package.","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/dot-lotriPointers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is used to get the pointers to the C objects that are used in the lotri package. — .lotriPointers","text":"","code":".lotriPointers()"},{"path":"https://nlmixr2.github.io/lotri/reference/dot-lotriPointers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function is used to get the pointers to the C objects that are used in the lotri package. — .lotriPointers","text":"list function pointers","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/dot-lotriPointers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This function is used to get the pointers to the C objects that are used in the lotri package. — .lotriPointers","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/dot-lotriPointers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function is used to get the pointers to the C objects that are used in the lotri package. — .lotriPointers","text":"","code":".lotriPointers() #> $lotriLstToMat #> <pointer: 0x7fe6eebc7f40> #>  #> $asLotriMat #> <pointer: 0x7fe6eebc61b0> #>  #> $lotriSep #> <pointer: 0x7fe6eebc9f40> #>  #> $lotriAllNames #> <pointer: 0x7fe6eebca510> #>  #> $lotriGetBounds #> <pointer: 0x7fe6eebc6750> #>  #> $lotriMaxNu #> <pointer: 0x7fe6eebc9a10> #>  #> $isLotri #> <pointer: 0x7fe6eebca3f0> #>  #> $lotriRcm #> <pointer: 0x7fe6eebd5490> #>  #> $lotriNearPDc #> <pointer: 0x7fe6eebcf7f0> #>  #> $lotriNearPDsexp #> <pointer: 0x7fe6eebcfd60> #>"},{"path":"https://nlmixr2.github.io/lotri/reference/lotri.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily Specify block-diagonal matrices with lower triangular info — lotri","title":"Easily Specify block-diagonal matrices with lower triangular info — lotri","text":"Easily Specify block-diagonal matrices lower triangular info","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easily Specify block-diagonal matrices with lower triangular info — lotri","text":"","code":"lotri(x, ..., cov = FALSE, rcm = FALSE, envir = parent.frame(), default = \"id\")"},{"path":"https://nlmixr2.github.io/lotri/reference/lotri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easily Specify block-diagonal matrices with lower triangular info — lotri","text":"x list, matrix expression, see details ... arguments treated list concatenated reapplied function. cov either boolean function accepting matrix input. boolean, `cov` describes matrix definition   actually rxode2/nlmixr2-style covariance matrix.   , `lotri()` enforce certain regularity conditions: - diagonal elements zero, -diagonal elements     zero. means covariance element fixed zero     truly part covariance matrix general. - rest matrix, `lotri` check     non-positive definite (required covariance matrix     general) sometimes difficult adjust covariance matrices   non-positive definite.  reason `cov` may also   function accepting matrix input returning non-positive   definite matrix matrix input.  function,   equivalent `cov=TRUE` additional ability   correct matrix non-positive definite needed. rcm logical; `TRUE`, matrix reordered change matrix banded matrix, easier express `lotri` full matrix.  RCM stands reverse Cuthill McKee (RCM) algorithm used matrix permutation. (see `rcm()`) envir environment expr     evaluated.  May also NULL, list, data frame,     pairlist integer specified sys.call. default default factor conditioning implemented.","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easily Specify block-diagonal matrices with lower triangular info — lotri","text":"named symmetric matrix useful `rxode2()` simulations (    perhaps elsewhere)","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotri.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Easily Specify block-diagonal matrices with lower triangular info — lotri","text":"can take R matrix, list including matrices  expressions, expressions Expressions can take form name ~ estimate lower triangular matrix \"adding\" names name1 + name2 ~ c(est1,                    est2, est3) matrices concatenated block diagonal matrix, like  bdiag, allows expressions specify  matrices easier.","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotri.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Easily Specify block-diagonal matrices with lower triangular info — lotri","text":"Matthew L Fidler","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotri.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easily Specify block-diagonal matrices with lower triangular info — lotri","text":"","code":"## A few ways to specify the same matrix lotri({et2 + et3 + et4 ~ c(40,                            0.1, 20,                            0.1, 0.1, 30)}) #>      et2  et3  et4 #> et2 40.0  0.1  0.1 #> et3  0.1 20.0  0.1 #> et4  0.1  0.1 30.0  ## You  do not need to enclose in {} lotri(et2 + et3 + et4 ~ c(40,                           0.1, 20,                           0.1, 0.1, 30),           et5 ~ 6) #>      et2  et3  et4 et5 #> et2 40.0  0.1  0.1   0 #> et3  0.1 20.0  0.1   0 #> et4  0.1  0.1 30.0   0 #> et5  0.0  0.0  0.0   6 ## But if you do enclose in {}, you can use ## multi-line matrix specifications:  lotri({et2 + et3 + et4 ~ c(40,                            0.1, 20,                            0.1, 0.1, 30)           et5 ~ 6           }) #>      et2  et3  et4 et5 #> et2 40.0  0.1  0.1   0 #> et3  0.1 20.0  0.1   0 #> et4  0.1  0.1 30.0   0 #> et5  0.0  0.0  0.0   6  ## You can also add lists or actual R matrices as in this example: lotri(list(et2 + et3 + et4 ~ c(40,                                0.1, 20,                                0.1, 0.1, 30),               matrix(1,dimnames=list(\"et5\",\"et5\")))) #>      et2  et3  et4 et5 #> et2 40.0  0.1  0.1   0 #> et3  0.1 20.0  0.1   0 #> et4  0.1  0.1 30.0   0 #> et5  0.0  0.0  0.0   1  ## Overall this is a flexible way to specify symmetric block ## diagonal matrices.  ## For rxode2, you may also condition based on different levels of ## nesting with lotri;  Here is an example:  mat <- lotri(lotri(iov.Ka ~ 0.5,                     iov.Cl ~ 0.6),               lotri(occ.Ka ~ 0.5,                     occ.Cl ~ 0.6) | occ(lower=4,nu=3))  mat #> [[1]] #>        iov.Ka iov.Cl #> iov.Ka    0.5    0.0 #> iov.Cl    0.0    0.6 #>  #> $occ #>        occ.Ka occ.Cl #> occ.Ka    0.5    0.0 #> occ.Cl    0.0    0.6 #>  #> Properties: lower, nu   ## you may access features of the matrix simply by `$` that is  mat$lower # Shows the lower bound for each condition #> [[1]] #> iov.Ka iov.Cl  #>   -Inf   -Inf  #>  #> $occ #> occ.Ka occ.Cl  #>      4      4  #>   mat$lower$occ # shows the lower bound for the occasion variable #> occ.Ka occ.Cl  #>      4      4   ## Note that `lower` fills in defaults for parameters.  This is true ## for `upper` true;  In fact when accessing this the defaults ## are put into the list  mat$upper #> [[1]] #> numeric(0) #>  #> $occ #> occ.Ka occ.Cl  #>    Inf    Inf  #>   ## However all other values return NULL if they are not present like  mat$lotri #> NULL  ## And values that are specified once are only returned on one list:  mat$nu #> $occ #> [1] 3 #>   mat$nu$occ #> [1] 3 mat$nu$id #> NULL  ## You can also change the default condition with `as.lotri`  mat <- as.lotri(mat, default=\"id\")  mat #> $id #>        iov.Ka iov.Cl #> iov.Ka    0.5    0.0 #> iov.Cl    0.0    0.6 #>  #> $occ #>        occ.Ka occ.Cl #> occ.Ka    0.5    0.0 #> occ.Cl    0.0    0.6 #>  #> Properties: lower, nu"},{"path":"https://nlmixr2.github.io/lotri/reference/lotriAsExpression.html","id":null,"dir":"Reference","previous_headings":"","what":"Change a matrix or lotri matrix to a lotri expression — lotriAsExpression","title":"Change a matrix or lotri matrix to a lotri expression — lotriAsExpression","text":"Change matrix lotri matrix lotri expression","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriAsExpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change a matrix or lotri matrix to a lotri expression — lotriAsExpression","text":"","code":"lotriAsExpression(x, useIni = FALSE, plusNames = FALSE, nameEst = 5L)"},{"path":"https://nlmixr2.github.io/lotri/reference/lotriAsExpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change a matrix or lotri matrix to a lotri expression — lotriAsExpression","text":"x matrix useIni use ini block plusNames logical, `TRUE` use `+ b ~ c(1, 0.1, 1)` naming convention.  Otherwise use lotri single line convention `~ 1; b ~ c(0.1, 1)` nameEst logical integerish.  logical `TRUE` add names matrix estimates `TRUE` using lotri single line convention .e. `~c(=1); b~c(=0.1, b=1)`.  integer, dimension matrix displayed needs dimension number names displayed.","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriDataFrameToLotriExpression.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a lotri data frame to a lotri expression — lotriDataFrameToLotriExpression","title":"Convert a lotri data frame to a lotri expression — lotriDataFrameToLotriExpression","text":"Convert lotri data frame lotri expression","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriDataFrameToLotriExpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a lotri data frame to a lotri expression — lotriDataFrameToLotriExpression","text":"","code":"lotriDataFrameToLotriExpression(data, useIni = FALSE)"},{"path":"https://nlmixr2.github.io/lotri/reference/lotriDataFrameToLotriExpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a lotri data frame to a lotri expression — lotriDataFrameToLotriExpression","text":"data lotri data frame useIni Use `ini` instead `lotri` expression","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriDataFrameToLotriExpression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a lotri data frame to a lotri expression — lotriDataFrameToLotriExpression","text":"expression lotri syntax equivalent data.frame provided","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriDataFrameToLotriExpression.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a lotri data frame to a lotri expression — lotriDataFrameToLotriExpression","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriDataFrameToLotriExpression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a lotri data frame to a lotri expression — lotriDataFrameToLotriExpression","text":"","code":"x <- lotri({   tka <- 0.45; label(\"Log Ka\")   tcl <- 1; label(\"Log Cl\")   tv <- 3.45; label(\"Log V\")   eta.ka ~ 0.6   eta.cl ~ 0.3   eta.v ~ 0.1   add.err <- 0.7 })  df <- as.data.frame(x)  lotriDataFrameToLotriExpression(df) #> lotri({ #>     tka <- 0.45 #>     label(\"Log Ka\") #>     tcl <- 1 #>     label(\"Log Cl\") #>     tv <- 3.45 #>     label(\"Log V\") #>     add.err <- 0.7 #>     eta.ka ~ 0.6 #>     eta.cl ~ 0.3 #>     eta.v ~ 0.1 #> })  # You may also call as.expression directly from the lotri object  as.expression(x) #> lotri({ #>     tka <- 0.45 #>     label(\"Log Ka\") #>     tcl <- 1 #>     label(\"Log Cl\") #>     tv <- 3.45 #>     label(\"Log V\") #>     add.err <- 0.7 #>     eta.ka ~ 0.6 #>     eta.cl ~ 0.3 #>     eta.v ~ 0.1 #> })"},{"path":"https://nlmixr2.github.io/lotri/reference/lotriEst.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or remove lotri estimate data frame from lotri object — lotriEst","title":"Extract or remove lotri estimate data frame from lotri object — lotriEst","text":"Extract remove lotri estimate data frame lotri object","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriEst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or remove lotri estimate data frame from lotri object — lotriEst","text":"","code":"lotriEst(x, drop = FALSE)"},{"path":"https://nlmixr2.github.io/lotri/reference/lotriEst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or remove lotri estimate data frame from lotri object — lotriEst","text":"x lotri object drop boolean indicating lotri estimate dropped","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriEst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract or remove lotri estimate data frame from lotri object — lotriEst","text":"data frame estimates NULL data.frame attached","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriEst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract or remove lotri estimate data frame from lotri object — lotriEst","text":"","code":"fix1 <- lotri({    a <- c(0, 1); backTransform(\"exp\"); label(\"a label\")    b <- c(0, 1, 2)    c <- fix(1)    d <- fix(0, 1, 2)    e <- c(0, 1, 2, fixed)    f+g ~ c(1,            0.5, 1)  })  # Extract the attached lotri estimate data frame lotriEst(fix1) #>   name lower est upper   fix   label backTransform #> 1    a     0   1   Inf FALSE a label           exp #> 2    b     0   1     2 FALSE    <NA>          <NA> #> 3    c  -Inf   1   Inf  TRUE    <NA>          <NA> #> 4    d     0   1     2  TRUE    <NA>          <NA> #> 5    e     0   1     2  TRUE    <NA>          <NA>  # Remove the attached lotri estimate data frame lotriEst(fix1, drop=TRUE) #>     f   g #> f 1.0 0.5 #> g 0.5 1.0"},{"path":"https://nlmixr2.github.io/lotri/reference/lotriMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a matrix from a list of matrices — lotriMat","title":"Create a matrix from a list of matrices — lotriMat","text":"creates named banded symmetric matrix list named symmetric matrices.","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a matrix from a list of matrices — lotriMat","text":"","code":"lotriMat(matList, format = NULL, start = 1L)"},{"path":"https://nlmixr2.github.io/lotri/reference/lotriMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a matrix from a list of matrices — lotriMat","text":"matList list symmetric named matrices format format dimension names sub-matrix repeated. format called dimension number, \"ETA[%d]\" represent \"ETA[1]\", \"ETA[2]\", etc start number counter repeated dimension start.","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a matrix from a list of matrices — lotriMat","text":"Named symmetric block diagonal matrix based   concatenating list matrices together","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriMat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a matrix from a list of matrices — lotriMat","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriMat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a matrix from a list of matrices — lotriMat","text":"","code":"testList <- list(lotri({et2 + et3 + et4 ~ c(40,                            0.1, 20,                            0.1, 0.1, 30)}),                  lotri(et5 ~ 6))  testList #> [[1]] #>      et2  et3  et4 #> et2 40.0  0.1  0.1 #> et3  0.1 20.0  0.1 #> et4  0.1  0.1 30.0 #>  #> [[2]] #>     et5 #> et5   6 #>   lotriMat(testList) #>      et2  et3  et4 et5 #> et2 40.0  0.1  0.1   0 #> et3  0.1 20.0  0.1   0 #> et4  0.1  0.1 30.0   0 #> et5  0.0  0.0  0.0   6   # Another option is to repeat a matrix a number of times.  This # can be done with list(matrix, # times to repeat).  # In the example below, the first matrix is repeated 3 times testList <- list(list(lotri({et2 + et3 + et4 ~ c(40,                            0.1, 20,                            0.1, 0.1, 30)}), 3),                  lotri(et5 ~ 6))  lotriMat(testList) #>      et2  et3  et4  et2  et3  et4  et2  et3  et4 et5 #> et2 40.0  0.1  0.1  0.0  0.0  0.0  0.0  0.0  0.0   0 #> et3  0.1 20.0  0.1  0.0  0.0  0.0  0.0  0.0  0.0   0 #> et4  0.1  0.1 30.0  0.0  0.0  0.0  0.0  0.0  0.0   0 #> et2  0.0  0.0  0.0 40.0  0.1  0.1  0.0  0.0  0.0   0 #> et3  0.0  0.0  0.0  0.1 20.0  0.1  0.0  0.0  0.0   0 #> et4  0.0  0.0  0.0  0.1  0.1 30.0  0.0  0.0  0.0   0 #> et2  0.0  0.0  0.0  0.0  0.0  0.0 40.0  0.1  0.1   0 #> et3  0.0  0.0  0.0  0.0  0.0  0.0  0.1 20.0  0.1   0 #> et4  0.0  0.0  0.0  0.0  0.0  0.0  0.1  0.1 30.0   0 #> et5  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0   6  # Notice that the dimension names `et2`, `et3` and `et4` are # repeated.  # Another option is to name the dimensions.  For example it could # be `ETA[1]`, `ETA[2]`, etc by using the 'format' option:  lotriMat(testList, \"ETA[%d]\") #>        ETA[1] ETA[2] ETA[3] ETA[4] ETA[5] ETA[6] ETA[7] ETA[8] ETA[9] et5 #> ETA[1]   40.0    0.1    0.1    0.0    0.0    0.0    0.0    0.0    0.0   0 #> ETA[2]    0.1   20.0    0.1    0.0    0.0    0.0    0.0    0.0    0.0   0 #> ETA[3]    0.1    0.1   30.0    0.0    0.0    0.0    0.0    0.0    0.0   0 #> ETA[4]    0.0    0.0    0.0   40.0    0.1    0.1    0.0    0.0    0.0   0 #> ETA[5]    0.0    0.0    0.0    0.1   20.0    0.1    0.0    0.0    0.0   0 #> ETA[6]    0.0    0.0    0.0    0.1    0.1   30.0    0.0    0.0    0.0   0 #> ETA[7]    0.0    0.0    0.0    0.0    0.0    0.0   40.0    0.1    0.1   0 #> ETA[8]    0.0    0.0    0.0    0.0    0.0    0.0    0.1   20.0    0.1   0 #> ETA[9]    0.0    0.0    0.0    0.0    0.0    0.0    0.1    0.1   30.0   0 #> et5       0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   6  # Or could start with ETA[2]:  lotriMat(testList, \"ETA[%d]\", 2) #>         ETA[2] ETA[3] ETA[4] ETA[5] ETA[6] ETA[7] ETA[8] ETA[9] ETA[10] et5 #> ETA[2]    40.0    0.1    0.1    0.0    0.0    0.0    0.0    0.0     0.0   0 #> ETA[3]     0.1   20.0    0.1    0.0    0.0    0.0    0.0    0.0     0.0   0 #> ETA[4]     0.1    0.1   30.0    0.0    0.0    0.0    0.0    0.0     0.0   0 #> ETA[5]     0.0    0.0    0.0   40.0    0.1    0.1    0.0    0.0     0.0   0 #> ETA[6]     0.0    0.0    0.0    0.1   20.0    0.1    0.0    0.0     0.0   0 #> ETA[7]     0.0    0.0    0.0    0.1    0.1   30.0    0.0    0.0     0.0   0 #> ETA[8]     0.0    0.0    0.0    0.0    0.0    0.0   40.0    0.1     0.1   0 #> ETA[9]     0.0    0.0    0.0    0.0    0.0    0.0    0.1   20.0     0.1   0 #> ETA[10]    0.0    0.0    0.0    0.0    0.0    0.0    0.1    0.1    30.0   0 #> et5        0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0   6"},{"path":"https://nlmixr2.github.io/lotri/reference/lotriMatInv.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a matrix into a list of block matrices — lotriMatInv","title":"Converts a matrix into a list of block matrices — lotriMatInv","text":"Converts matrix list block matrices","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriMatInv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a matrix into a list of block matrices — lotriMatInv","text":"","code":"lotriMatInv(mat)"},{"path":"https://nlmixr2.github.io/lotri/reference/lotriMatInv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a matrix into a list of block matrices — lotriMatInv","text":"mat Matrix convert list block matrices","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriMatInv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a matrix into a list of block matrices — lotriMatInv","text":"list block matrixes","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriMatInv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Converts a matrix into a list of block matrices — lotriMatInv","text":"inverse `lotriMat()`","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriMatInv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converts a matrix into a list of block matrices — lotriMatInv","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriMatInv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts a matrix into a list of block matrices — lotriMatInv","text":"","code":"# Create a block matrix using `lotri()` mat <- lotri({    a+b ~ c(1,            0.5, 1)    c ~ 1    d +e ~ c(1,             0.5, 1) })  print(mat) #>     a   b c   d   e #> a 1.0 0.5 0 0.0 0.0 #> b 0.5 1.0 0 0.0 0.0 #> c 0.0 0.0 1 0.0 0.0 #> d 0.0 0.0 0 1.0 0.5 #> e 0.0 0.0 0 0.5 1.0  # now convert t a list of matrices  mat2 <- lotriMatInv(mat) print(mat2) #> [[1]] #>     a   b #> a 1.0 0.5 #> b 0.5 1.0 #>  #> [[2]] #>   c #> c 1 #>  #> [[3]] #>     d   e #> d 1.0 0.5 #> e 0.5 1.0 #>   # Of course you can convert it back to a full matrix:  mat3 <- lotriMat(mat2)  print(mat3) #>     a   b c   d   e #> a 1.0 0.5 0 0.0 0.0 #> b 0.5 1.0 0 0.0 0.0 #> c 0.0 0.0 1 0.0 0.0 #> d 0.0 0.0 0 1.0 0.5 #> e 0.0 0.0 0 0.5 1.0"},{"path":"https://nlmixr2.github.io/lotri/reference/lotriNearPD.html","id":null,"dir":"Reference","previous_headings":"","what":"C++ implementation of Matrix's nearPD — lotriNearPD","title":"C++ implementation of Matrix's nearPD — lotriNearPD","text":"`ensureSymmetry` makes sure symmetric applying 0.5*(t(x) + x) using lotriNearPD","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriNearPD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C++ implementation of Matrix's nearPD — lotriNearPD","text":"","code":"lotriNearPD(   x,   keepDiag = FALSE,   do2eigen = TRUE,   doDykstra = TRUE,   only.values = FALSE,   ensureSymmetry = !isSymmetric(x),   eig.tol = 1e-06,   conv.tol = 1e-07,   posd.tol = 1e-08,   maxit = 100L,   trace = FALSE )"},{"path":"https://nlmixr2.github.io/lotri/reference/lotriNearPD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"C++ implementation of Matrix's nearPD — lotriNearPD","text":"x numeric \\(n \\times n\\) approximately positive     definite matrix, typically approximation correlation     covariance matrix.  x symmetric (    ensureSymmetry false), symmpart(x) used. keepDiag logical, generalizing corr: TRUE,     resulting matrix diagonal     (diag(x)) input matrix. do2eigen logical indicating `posdefify()` (like package `sfsmisc`) eigen step applied result Higham algorithm doDykstra logical indicating Dykstra's correction     used; true default.  false, algorithm basically     direct fixpoint iteration     \\(Y_k = P_U(P_S(Y_{k-1}))\\). .values logical; TRUE, result just     vector eigenvalues approximating matrix. ensureSymmetry logical; default, symmpart(x) used whenever isSymmetric(x) true.  user can explicitly set TRUE FALSE, saving symmetry test. Beware however setting FALSE asymmetric input x, typically nonsense! eig.tol defines relative positiveness eigenvalues compared     largest one, \\(\\lambda_1\\). Eigenvalues \\(\\lambda_k\\)     treated zero \\(\\lambda_k / \\lambda_1 \\le eig.tol\\). conv.tol convergence tolerance Higham algorithm. posd.tol tolerance enforcing positive definiteness (    final posdefify step do2eigen TRUE). maxit maximum number iterations allowed. trace logical integer specifying convergence monitoring     traced.","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriNearPD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"C++ implementation of Matrix's nearPD — lotriNearPD","text":"unlike matrix package, simply returns nearest   positive definite matrix","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriNearPD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"C++ implementation of Matrix's nearPD — lotriNearPD","text":"implements algorithm Higham (2002), (do2eigen true) forces positive definiteness using code `sfsmisc::posdefify()`.  algorithm Knol ten Berge (1989) (implemented ) general allows constraints (1) fix rows (columns) matrix (2) force smallest eigenvalue certain value. Note setting corr = TRUE just sets diag(.) <- 1 within algorithm. Higham (2002) uses Dykstra's correction, version Jens  Oehlschlägel use (accidentally),   still gave reasonable results; simplification, now  used doDykstra = FALSE,   active nearPD() Matrix version 0.999375-40.","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriNearPD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"C++ implementation of Matrix's nearPD — lotriNearPD","text":"Cheng, Sheung Hun Higham, Nick (1998)   Modified Cholesky Algorithm Based Symmetric Indefinite Factorization;   SIAM J. Matrix Anal.\\ Appl., 19, 1097–1110. Knol DL, ten Berge JMF (1989)   Least-squares approximation improper correlation matrix   proper one.   Psychometrika 54, 53–61. Higham, Nick (2002)   Computing nearest correlation matrix - problem finance;   IMA Journal Numerical Analysis 22, 329–343.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/lotri/reference/lotriNearPD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"C++ implementation of Matrix's nearPD — lotriNearPD","text":"Jens Oehlschlägel donated first   version Matrix.  Subsequent changes Matrix package   authors, later modifications C++ Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriNearPD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"C++ implementation of Matrix's nearPD — lotriNearPD","text":"","code":"set.seed(27) m <- matrix(round(rnorm(25),2), 5, 5) m <- m + t(m) diag(m) <- pmax(0, diag(m)) + 1 (m <- round(cov2cor(m), 2)) #>       [,1]  [,2]  [,3]  [,4]  [,5] #> [1,]  1.00  0.65 -0.46 -1.15 -0.76 #> [2,]  0.65  1.00  0.58  0.50 -0.90 #> [3,] -0.46  0.58  1.00 -0.45 -0.32 #> [4,] -1.15  0.50 -0.45  1.00  0.25 #> [5,] -0.76 -0.90 -0.32  0.25  1.00  near.m <- lotriNearPD(m) round(near.m, 2) #>       [,1]  [,2]  [,3]  [,4]  [,5] #> [1,]  1.31  0.41 -0.24 -0.85 -0.75 #> [2,]  0.41  1.19  0.41  0.27 -0.91 #> [3,] -0.24  0.41  1.15 -0.24 -0.32 #> [4,] -0.85  0.27 -0.24  1.28  0.26 #> [5,] -0.75 -0.91 -0.32  0.26  1.00 norm(m - near.m) # 1.102 / 1.08 #> [1] 1.079735  round(lotriNearPD(m, only.values=TRUE), 9) #> [1] 2.800681404 1.831722441 1.229003616 0.076994641 0.000000028  ## A longer example, extended from Jens' original, ## showing the effects of some of the options:  pr <- matrix(c(1,     0.477, 0.644, 0.478, 0.651, 0.826,                0.477, 1,     0.516, 0.233, 0.682, 0.75,                0.644, 0.516, 1,     0.599, 0.581, 0.742,                0.478, 0.233, 0.599, 1,     0.741, 0.8,                0.651, 0.682, 0.581, 0.741, 1,     0.798,                0.826, 0.75,  0.742, 0.8,   0.798, 1),                nrow = 6, ncol = 6)  nc  <- lotriNearPD(pr)"},{"path":"https://nlmixr2.github.io/lotri/reference/lotriSep.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate a lotri matrix into above and below lotri matrices — lotriSep","title":"Separate a lotri matrix into above and below lotri matrices — lotriSep","text":"used creating nesting simulations `rxode2()` may useful external function calls.","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriSep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate a lotri matrix into above and below lotri matrices — lotriSep","text":"","code":"lotriSep(x, above, below, aboveStart = 1L, belowStart = 1L)"},{"path":"https://nlmixr2.github.io/lotri/reference/lotriSep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate a lotri matrix into above and below lotri matrices — lotriSep","text":"x lotri matrix Named integer vector listing variability id level.  element lists number population differences whole data-set (integer) Named integer vector listing variability id level.  element lists number items individual level.  example 3 occasions per individual use 'c(occ=3L)' aboveStart Add attribute THETA[#] added belowStart Add attribute ETA[#] added","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriSep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate a lotri matrix into above and below lotri matrices — lotriSep","text":"List two lotri matrices","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriSep.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Separate a lotri matrix into above and below lotri matrices — lotriSep","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/lotriSep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate a lotri matrix into above and below lotri matrices — lotriSep","text":"","code":"omega <- lotri(lotri(eta.Cl ~ 0.1,                         eta.Ka ~ 0.1) | id(nu=100),                   lotri(eye.Cl ~ 0.05,                         eye.Ka ~ 0.05) | eye(nu=50),                   lotri(iov.Cl ~ 0.01,                         iov.Ka ~ 0.01) | occ(nu=200),                   lotri(inv.Cl ~ 0.02,                         inv.Ka ~ 0.02) | inv(nu=10))  lotriSep(omega, above=c(inv=10L), below=c(eye=2L, occ=4L)) #> $above #> $inv #>        inv.Cl inv.Ka #> inv.Cl   0.02   0.00 #> inv.Ka   0.00   0.02 #>  #> attr(,\"format\") #> [1] \"THETA[%d]\" #> attr(,\"start\") #> [1] 1 #> Properties: nu, same  #>  #> $below #> $id #>        eta.Cl eta.Ka #> eta.Cl    0.1    0.0 #> eta.Ka    0.0    0.1 #>  #> $eye #>        eye.Cl eye.Ka #> eye.Cl   0.05   0.00 #> eye.Ka   0.00   0.05 #>  #> $occ #>        iov.Cl iov.Ka #> iov.Cl   0.01   0.00 #> iov.Ka   0.00   0.01 #>  #> attr(,\"format\") #> [1] \"ETA[%d]\" #> attr(,\"start\") #> [1] 1 #> Properties: nu, same  #>"},{"path":"https://nlmixr2.github.io/lotri/reference/rcm.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the RCM algorithm to permute to banded matrix — rcm","title":"Use the RCM algorithm to permute to banded matrix — rcm","text":"RCM stands reverse Cuthill McKee (RCM) algorithm used permute matrix banded matrix.","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/rcm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the RCM algorithm to permute to banded matrix — rcm","text":"","code":"rcm(x)"},{"path":"https://nlmixr2.github.io/lotri/reference/rcm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the RCM algorithm to permute to banded matrix — rcm","text":"x symmetric matrix","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/rcm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the RCM algorithm to permute to banded matrix — rcm","text":"permuted matrix banded","code":""},{"path":"https://nlmixr2.github.io/lotri/reference/rcm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use the RCM algorithm to permute to banded matrix — rcm","text":"","code":"m <- lotri({  a + b + c + d + e + f + g + h + i + j + k + l + m + n + o +  p ~ c(0.4, 0, 0.3, 0, 0, 0, -0.1, 0, 0, 0.2, 0, 0, 0,        0, 0.5, 0, 0, 0, 0, 0, 1.3, 0, 0, 0, 0, 0, -0.6, 0.8,        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2,        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.9, 0, 0, 0, 0, 0, 0, 0,        0, 0, 0, 0.9, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2, 0, 0.3,        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.1, 0.2, 0, 0, 0.2,        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, -1.1,        0.9, 0, 0, 0, 0, 0, 0, 0, 4.7, 0, 0, 0, 0, 0, 0, 0, 0,        0, 0.5, 0, 0.2, 0, 0, 0, 1.9) })  rcm(m) #>     p    l    j    o    g    f   n    d    a   m   k   i   e   b h c #> p 1.9  0.2  0.5  0.0  0.0  0.0 0.0  0.0  0.0 0.0 0.0 0.0 0.0 0.0 0 0 #> l 0.2  0.3 -0.2  0.0  0.0  0.0 0.0  0.0  0.0 0.0 0.0 0.0 0.0 0.0 0 0 #> j 0.5 -0.2  0.9  0.0  0.0  0.0 0.0  0.0  0.0 0.0 0.0 0.0 0.0 0.0 0 0 #> o 0.0  0.0  0.0  4.7  0.9 -1.1 0.0  0.0  0.0 0.0 0.0 0.0 0.0 0.0 0 0 #> g 0.0  0.0  0.0  0.9  0.8 -0.6 0.0  0.0  0.0 0.0 0.0 0.0 0.0 0.0 0 0 #> f 0.0  0.0  0.0 -1.1 -0.6  1.3 0.0  0.0  0.0 0.0 0.0 0.0 0.0 0.0 0 0 #> n 0.0  0.0  0.0  0.0  0.0  0.0 0.4  0.2  0.2 0.0 0.0 0.0 0.0 0.0 0 0 #> d 0.0  0.0  0.0  0.0  0.0  0.0 0.2  0.2 -0.1 0.0 0.0 0.0 0.0 0.0 0 0 #> a 0.0  0.0  0.0  0.0  0.0  0.0 0.2 -0.1  0.4 0.0 0.0 0.0 0.0 0.0 0 0 #> m 0.0  0.0  0.0  0.0  0.0  0.0 0.0  0.0  0.0 2.1 0.0 0.0 0.0 0.0 0 0 #> k 0.0  0.0  0.0  0.0  0.0  0.0 0.0  0.0  0.0 0.0 0.9 0.0 0.0 0.0 0 0 #> i 0.0  0.0  0.0  0.0  0.0  0.0 0.0  0.0  0.0 0.0 0.0 0.2 0.0 0.0 0 0 #> e 0.0  0.0  0.0  0.0  0.0  0.0 0.0  0.0  0.0 0.0 0.0 0.0 0.5 0.0 0 0 #> b 0.0  0.0  0.0  0.0  0.0  0.0 0.0  0.0  0.0 0.0 0.0 0.0 0.0 0.3 0 0 #> h 0.0  0.0  0.0  0.0  0.0  0.0 0.0  0.0  0.0 0.0 0.0 0.0 0.0 0.0 0 0 #> c 0.0  0.0  0.0  0.0  0.0  0.0 0.0  0.0  0.0 0.0 0.0 0.0 0.0 0.0 0 0"},{"path":"https://nlmixr2.github.io/lotri/news/index.html","id":"lotri-development-version","dir":"Changelog","previous_headings":"","what":"lotri (development version)","title":"lotri (development version)","text":"Added new way specifying lotri matrices: specify matrices : Now can specify per row : form now default converting matrix lotri expression. addition matrix large enough (default 5x5 matrix), named changing expression: way changing R parsed expression rendered human readable format. New option cov added check matrix suitability covariance matrix. cov=TRUE, -diagonal elements covariance matrices may longer nonzero diagonal value zero (rxode2#481). also check tht matrix non-positive definite non-diagonal terms. cov can also function allow correction matrix positive definite matrix automatically. New option rcm; enabled, permute matrix try get banded matrix using Reverse Cuthill McKee algorithm. Change internals lotri new rxode2 longer required binary linked lotri. Add new function rcm() permutes matrix get band matrix (possible). uses Reverse Reverse Cuthill McKee (RCM) algorithm. Moved nmNearPD() package renamed lotriNearPD(). addition moving, function now retain dimension names. New exported function lotriAsExpression() fine control .expression() work without converting matrix lotri form.","code":"m <- lotri({   a + b ~ c(1,             0.5, 1) }) m <- lotri({   a ~ 1   b ~ c(0.5, 1) }) m <- lotri({   a ~ c(a=1)   b ~ c(a=0.5, b=1)   c ~ c(a=0.5, b=0.5, c=1)   d ~ c(a=0.5, b=0.5, c=0.5, d=1)   e ~ c(a=0.5, b=0.5, c=0.5, d=1,         e=1) })"},{"path":"https://nlmixr2.github.io/lotri/news/index.html","id":"lotri-044","dir":"Changelog","previous_headings":"","what":"lotri 0.4.4","title":"lotri 0.4.4","text":"Bug fix non-standard evaluation take numeric vector evaluating environment using lotri(n1+n2~omega)","code":""},{"path":"https://nlmixr2.github.io/lotri/news/index.html","id":"lotri-043","dir":"Changelog","previous_headings":"","what":"lotri 0.4.3","title":"lotri 0.4.3","text":"CRAN release: 2023-03-20 Bug fix etas named correctly large order problems","code":""},{"path":"https://nlmixr2.github.io/lotri/news/index.html","id":"lotri-042","dir":"Changelog","previous_headings":"","what":"lotri 0.4.2","title":"lotri 0.4.2","text":"CRAN release: 2022-06-18 Bug fix etas inconsistently numbered Add case empty initialization block","code":""},{"path":"https://nlmixr2.github.io/lotri/news/index.html","id":"lotri-040","dir":"Changelog","previous_headings":"","what":"lotri 0.4.0","title":"lotri 0.4.0","text":"CRAN release: 2022-04-15 Can convert lotri objects data-frames similar internal data frame used nlmixr(); can converted back .lotri() Added ability add estimates lotri object. estimates attached data.frame original lotri matrix. can extract drop function lotriEst() Allow specifying fixed components lotri() matrices. Add cov, cor, sd, var, chol options matrix specification. final matrix always covariance matrix Add function lotriMatInv() takes symmetric block matrix converts list matrices. sort inverse operation lotriMat() Add error lotri(~c(40)) Added ability flag fixed unfixed components matrix. Currently lotri supports one type. lotriFix objects, ie created population types estimates covariance estimates, allow converted equivalent expression .expression() lotri object lotriDataFrameToLotriExpression() data.frame","code":""},{"path":"https://nlmixr2.github.io/lotri/news/index.html","id":"lotri-031","dir":"Changelog","previous_headings":"","what":"lotri 0.3.1","title":"lotri 0.3.1","text":"CRAN release: 2021-01-05 Change errors/warnings use call.=FALSE equivalent. Refactor C code reduce complexity Change C code play nicely rchk Allow lotriMat mix named unnamed matrices; mixed, unnamed matrix returned.","code":""},{"path":"https://nlmixr2.github.io/lotri/news/index.html","id":"lotri-022","dir":"Changelog","previous_headings":"","what":"lotri 0.2.2","title":"lotri 0.2.2","text":"CRAN release: 2020-05-29 Bug fix conditional matrices Now accessing $lower $upper gives default values even wasn’t specified. Can change default conditional matrix value like “id” Can add properties matrix->lotri .lotri(matrix, lower=3, default=“id”) Dropped Matrix import added lotriMat create banded matrices (faster Matrix now included repeated matrices list(matrix, rep)). Bug fix default properties upper lower bounds specified","code":""},{"path":"https://nlmixr2.github.io/lotri/news/index.html","id":"lotri-021","dir":"Changelog","previous_headings":"","what":"lotri 0.2.1","title":"lotri 0.2.1","text":"CRAN release: 2020-02-12 Added conditional matrix specification |; Returns list matrices condition name matrix returned. conditional matrix can also include properties ie | id(lower=c(eta1=3)) Added NEWS.md file track changes package.","code":""},{"path":"https://nlmixr2.github.io/lotri/news/index.html","id":"lotri-011","dir":"Changelog","previous_headings":"","what":"lotri 0.1.1","title":"lotri 0.1.1","text":"CRAN release: 2019-05-14 Initial Release","code":""}]
